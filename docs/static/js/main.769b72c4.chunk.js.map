{"version":3,"sources":["reportWebVitals.ts","BattlePlan.ts","tools.ts","MapPlanner.tsx","index.tsx"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ColourValues","w","k","e","r","g","b","y","p","c","n","o","pk","Colours","Object","keys","LightColours","Sizes","s","en","count","Array","alphabet","columnLabel","label","Math","floor","parseColumnLabel","l","total","i","length","ch","indexOf","cell","x","unitAt","plan","units","find","u","q","includes","getMAdd","parts","type","notes","push","colour","size","join","around","mid","substr","convertFromUVar","val","JSON","parse","name","width","height","walls","forEach","line","command","args","switches","qmode","smode","current","parseWord","splitCommand","attack","split","arg","key","parseInt","bg","location","undefined","note","col","toUpperCase","row","parseCellLabel","sizeLookup","T","S","M","L","H","G","MapUnit","onClick","unit","gridsize","scale","ssize","max","cx","cy","stroke","fill","pointerEvents","textAnchor","dominantBaseline","fontSize","MapView","sx","sy","padx","pady","className","xmlns","viewBox","map","strokeWidth","TextInput","value","onChange","target","NumberInput","valueAsNumber","EnumInput","empty","options","resolve","MapSettings","setPlan","UnitSettings","index","update","patch","filter","_","MapDetails","selection","window","open","url","startx","starty","bgx","bgy","door","ex","ey","token","noface","getOTFBMUrl","MapCode","lines","uvar","mapArgs","cmds","stringify","convertToUvar","id","convertToBPlan","MapPlanner","useState","setSelection","stripped","startsWith","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.769b72c4.chunk.js","sourcesContent":["import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","export const ColourValues = {\r\n  w: \"white\",\r\n  k: \"black\",\r\n  e: \"grey\",\r\n  r: \"#f33\",\r\n  g: \"#3c6\",\r\n  b: \"#37b\",\r\n  y: \"#fd8\",\r\n  p: \"#c6a\",\r\n  c: \"skyblue\",\r\n  n: \"#422\",\r\n  o: \"#f80\",\r\n  pk: \"#fce\",\r\n};\r\ntype ColourName = keyof typeof ColourValues;\r\nexport const Colours = Object.keys(ColourValues) as ColourName[];\r\nexport const LightColours = [\"w\", \"g\", \"y\", \"c\", \"o\", \"pk\"] as ColourName[];\r\n\r\nexport const Sizes = [\"T\", \"S\", \"M\", \"L\", \"H\", \"G\"];\r\n\r\nexport interface Unit {\r\n  label: string;\r\n  type: string;\r\n  x: number;\r\n  y: number;\r\n  colour?: ColourName;\r\n  size: string;\r\n  token?: string;\r\n  noface?: boolean;\r\n}\r\n\r\nexport const DoorTypes = {\r\n  o: \"open\",\r\n  c: \"closed\",\r\n  b: \"double\",\r\n  s: \"secret\",\r\n};\r\ntype DoorType = keyof typeof DoorTypes;\r\nexport const Doors = Object.keys(DoorTypes) as DoorType[];\r\n\r\nexport interface Wall {\r\n  sx: number;\r\n  sy: number;\r\n  ex: number;\r\n  ey: number;\r\n  colour?: ColourName;\r\n  door?: DoorType;\r\n}\r\n\r\nexport default interface BattlePlan {\r\n  name: string;\r\n  width: number;\r\n  height: number;\r\n  units: Unit[];\r\n  bg?: string;\r\n  bgx?: number;\r\n  bgy?: number;\r\n  startx?: number;\r\n  starty?: number;\r\n  gridsize?: number;\r\n  walls: Wall[];\r\n}\r\n","import BattlePlan, { Unit } from \"./BattlePlan\";\r\n\r\nexport function en(count: number) {\r\n  return [...Array(count).keys()];\r\n}\r\n\r\nconst alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r\nexport function columnLabel(n: number) {\r\n  var label = \"\";\r\n  while (n || !label) {\r\n    label += alphabet[n % 26];\r\n    n = Math.floor(n / 26);\r\n  }\r\n\r\n  return label;\r\n}\r\n\r\nfunction parseColumnLabel(l: string) {\r\n  var total = 0;\r\n  for (var i = 0; i < l.length; i++) {\r\n    const ch = l[i];\r\n    const worth = alphabet.indexOf(ch);\r\n    total = total * 26 + worth;\r\n  }\r\n\r\n  return total;\r\n}\r\n\r\nexport function cell(x: number, y: number) {\r\n  return columnLabel(x) + (y + 1);\r\n}\r\n\r\nfunction parseCellLabel(l: string) {\r\n  for (var i = 0; i < l.length; i++) {\r\n    if (\"0123456789\".indexOf(l[i]) !== -1) {\r\n      const col = l.substr(0, i).toUpperCase();\r\n      const row = l.substr(i);\r\n\r\n      return { x: parseColumnLabel(col), y: parseInt(row, 10) - 1 };\r\n    }\r\n  }\r\n\r\n  return { x: 0, y: 0 };\r\n}\r\n\r\nexport function unitAt(plan: BattlePlan, x: number, y: number) {\r\n  return plan.units.find((u) => u.x === x && u.y === y);\r\n}\r\n\r\nfunction q(s: string) {\r\n  if (s.includes(\" \")) return `\"${s}\"`;\r\n  return s;\r\n}\r\n\r\nfunction getMAdd(u: Unit) {\r\n  const parts = [`!i madd ${q(u.type)}`];\r\n  const notes = [`Location: ${cell(u.x, u.y)}`];\r\n  if (u.label) parts.push(`-name ${q(u.label)}`);\r\n  if (u.colour) notes.push(`Color: ${u.colour}`);\r\n  if (u.size !== \"M\") notes.push(`Size: ${u.size}`);\r\n\r\n  if (notes.length) parts.push(`-note \"${notes.join(\" | \")}\"`);\r\n  return parts.join(\" \");\r\n}\r\n\r\nexport function convertToBPlan(plan: BattlePlan) {\r\n  const mapArgs = [`-mapsize ${plan.width}x${plan.height}`];\r\n  if (plan.bg) mapArgs.push(`-bg ${plan.bg}`);\r\n\r\n  const cmds: string[] = [];\r\n  const id = q(plan.name);\r\n  cmds.push(`!bplan new ${id}`, `!bplan map ${id} set ${mapArgs.join(\" \")}`);\r\n  cmds.push(...plan.units.map((u) => `!bplan add ${id} ${getMAdd(u)}`));\r\n\r\n  return cmds;\r\n}\r\n\r\nexport function convertToUvar(plan: BattlePlan) {\r\n  const mapArgs = [`Size: ${plan.width}x${plan.height}`];\r\n  if (plan.bg) mapArgs.push(`Background: ${plan.bg}`);\r\n\r\n  const cmds: string[] = [];\r\n  cmds.push(\r\n    \"!i add 100 DM -p\",\r\n    `!i effect DM map -attack \"||${mapArgs.join(\" ~ \")}\"`\r\n  );\r\n  cmds.push(...plan.units.map(getMAdd));\r\n\r\n  return \"!uvar Battles \" + JSON.stringify({ [plan.name]: cmds });\r\n}\r\n\r\nfunction splitCommand(line: string) {\r\n  var command = \"\";\r\n  var args: string[] = [];\r\n  const switches: { [key: string]: string } = {};\r\n  var qmode = false;\r\n  var smode = \"\";\r\n  var current = \"\";\r\n\r\n  function parseWord() {\r\n    if (!command) command = current;\r\n    else if (current[0] === \"-\") smode = current;\r\n    else if (smode) {\r\n      switches[smode.substr(1)] = current;\r\n      smode = \"\";\r\n    } else args.push(current);\r\n    current = \"\";\r\n  }\r\n\r\n  for (var i = 0; i < line.length; i++) {\r\n    const ch = line[i];\r\n\r\n    if (qmode) {\r\n      if (ch === '\"') qmode = false;\r\n      else current += ch;\r\n    } else {\r\n      if (ch === '\"') {\r\n        qmode = true;\r\n      } else if (ch === \" \") {\r\n        parseWord();\r\n      } else {\r\n        current += ch;\r\n      }\r\n    }\r\n  }\r\n  if (current) parseWord();\r\n\r\n  return { command, args, switches };\r\n}\r\n\r\nfunction around(s: string, mid: string) {\r\n  const i = s.indexOf(mid);\r\n  const key = s.substr(0, i);\r\n  const val = s.substr(i + mid.length);\r\n\r\n  return [key, val];\r\n}\r\n\r\nexport function convertFromUVar(s: string) {\r\n  const val: { [key: string]: string[] } = JSON.parse(s);\r\n  const name = Object.keys(val)[0];\r\n  const plan: BattlePlan = { name, width: 1, height: 1, units: [], walls: [] };\r\n  val[name].forEach((line) => {\r\n    const { command, args, switches } = splitCommand(line);\r\n    if (![\"!i\", \"!init\"].includes(command)) return;\r\n\r\n    switch (args[0]) {\r\n      case \"effect\":\r\n        switches.attack\r\n          .substr(2)\r\n          .split(\" ~ \")\r\n          .forEach((arg) => {\r\n            const [key, val] = around(arg, \": \");\r\n\r\n            if (key === \"Size\") {\r\n              const [width, height] = around(val, \"x\");\r\n              plan.width = parseInt(width, 10);\r\n              plan.height = parseInt(height, 10);\r\n            } else if (key === \"Background\") {\r\n              plan.bg = val;\r\n            }\r\n          });\r\n        break;\r\n\r\n      case \"madd\":\r\n        const type = args[1];\r\n        const label = switches.name;\r\n        var location = \"\";\r\n        var colour = undefined;\r\n        var size = \"M\";\r\n        switches.note.split(\" | \").forEach((arg) => {\r\n          const [key, val] = around(arg, \": \");\r\n\r\n          if (key === \"Location\") {\r\n            location = val;\r\n          } else if (key === \"Color\") {\r\n            colour = val;\r\n          } else if (key === \"Size\") {\r\n            size = val;\r\n          }\r\n        });\r\n\r\n        plan.units.push({\r\n          type,\r\n          label,\r\n          colour,\r\n          size,\r\n          ...parseCellLabel(location),\r\n        });\r\n    }\r\n  });\r\n\r\n  return plan;\r\n}\r\n\r\nexport function getOTFBMUrl(plan: BattlePlan) {\r\n  var url = \"https://otfbm.io/\";\r\n\r\n  if (plan.startx || plan.starty)\r\n    url += cell(plan.startx || 0, plan.starty || 0) + \":\";\r\n  url += `${plan.width}x${plan.height}`;\r\n  if (plan.gridsize) url += `/@c${plan.gridsize}`;\r\n  if (plan.bgx || plan.bgy) url += `/@o${plan.bgx || 0}:${plan.bgy || 0}`;\r\n\r\n  if (plan.walls.length) {\r\n    url += \"/\";\r\n    plan.walls.forEach((w) => {\r\n      url += \"_\";\r\n      if (w.colour) url += \"-c\" + w.colour;\r\n      url += cell(w.sx, w.sy);\r\n      if (w.door) url += \"-\" + w.door;\r\n      url += cell(w.ex, w.ey);\r\n    });\r\n  }\r\n\r\n  plan.units.forEach((u) => {\r\n    url += \"/\" + cell(u.x, u.y);\r\n    if (u.size !== \"M\") url += u.size;\r\n    url += u.colour || \"r\";\r\n    if (u.label) url += \"-\" + u.label;\r\n    if (u.token) {\r\n      url += \"~\" + u.token;\r\n      if (u.noface) url += \"~\";\r\n    }\r\n  });\r\n\r\n  if (plan.bg) url += \"?bg=\" + plan.bg;\r\n  return url;\r\n}\r\n","import { useState } from \"react\";\r\nimport BattlePlan, {\r\n  Colours,\r\n  ColourValues,\r\n  LightColours,\r\n  Sizes,\r\n  Unit,\r\n} from \"./BattlePlan\";\r\nimport \"./MapPlanner.scss\";\r\nimport {\r\n  unitAt,\r\n  en,\r\n  columnLabel,\r\n  convertToUvar,\r\n  convertToBPlan,\r\n  convertFromUVar,\r\n  getOTFBMUrl,\r\n} from \"./tools\";\r\n\r\ntype coord = [x: number, y: number];\r\ntype BattlePlanUpdater = React.Dispatch<React.SetStateAction<BattlePlan>>;\r\n\r\nconst sizeLookup: { [size: string]: number } = {\r\n  T: 0.3,\r\n  S: 0.45,\r\n  M: 0.5,\r\n  L: 1,\r\n  H: 1.5,\r\n  G: 2,\r\n};\r\nfunction MapUnit({\r\n  onClick,\r\n  plan,\r\n  unit: u,\r\n}: {\r\n  onClick: (x: number, y: number) => void;\r\n  plan: BattlePlan;\r\n  unit: Unit;\r\n}) {\r\n  const size = plan.gridsize || 40;\r\n  const colour = u.colour || \"r\";\r\n  const scale = sizeLookup[u.size];\r\n  const ssize = scale * size;\r\n  const x = (u.x + Math.max(scale, 0.5)) * size;\r\n  const y = (u.y + Math.max(scale, 0.5)) * size;\r\n\r\n  return (\r\n    <g onClick={() => onClick(u.x, u.y)}>\r\n      <circle\r\n        cx={x}\r\n        cy={y}\r\n        r={ssize - 2}\r\n        stroke=\"black\"\r\n        fill={ColourValues[colour]}\r\n        pointerEvents=\"none\"\r\n      />\r\n      {colour !== \"w\" && (\r\n        <circle\r\n          cx={x}\r\n          cy={y}\r\n          r={ssize - 3}\r\n          stroke=\"white\"\r\n          fill=\"transparent\"\r\n          pointerEvents=\"none\"\r\n        />\r\n      )}\r\n      <text\r\n        x={x}\r\n        y={y}\r\n        textAnchor=\"middle\"\r\n        dominantBaseline=\"central\"\r\n        fill={LightColours.includes(colour) ? \"black\" : \"white\"}\r\n        fontSize={ssize * 0.6}\r\n        pointerEvents=\"none\"\r\n      >\r\n        {u.label}\r\n      </text>\r\n    </g>\r\n  );\r\n}\r\n\r\nfunction MapView({\r\n  onClick,\r\n  plan,\r\n}: {\r\n  onClick: (x: number, y: number) => void;\r\n  plan: BattlePlan;\r\n}) {\r\n  const size = plan.gridsize || 40;\r\n  const sx = plan.width * size;\r\n  const sy = plan.height * size;\r\n  const padx = (plan.width + 2) * size;\r\n  const pady = (plan.height + 2) * size;\r\n\r\n  return (\r\n    <svg\r\n      className=\"MapView\"\r\n      xmlns=\"http://www.w3.org/2000/svg\"\r\n      viewBox={`${-size} ${-size} ${padx} ${pady}`}\r\n    >\r\n      <g>\r\n        {en(plan.width).map((x) => (\r\n          <text\r\n            x={size * (x + 0.5)}\r\n            y=\"-20\"\r\n            textAnchor=\"middle\"\r\n            dominantBaseline=\"central\"\r\n          >\r\n            {columnLabel(x)}\r\n          </text>\r\n        ))}\r\n        {en(plan.height).map((y) => (\r\n          <text\r\n            x=\"-20\"\r\n            y={size * (y + 0.5)}\r\n            textAnchor=\"middle\"\r\n            dominantBaseline=\"central\"\r\n          >\r\n            {y + 1}\r\n          </text>\r\n        ))}\r\n      </g>\r\n      <g stroke=\"grey\" fill=\"white\">\r\n        {en(plan.width).map((x) =>\r\n          en(plan.height).map((y) => (\r\n            <rect\r\n              x={size * x}\r\n              y={size * y}\r\n              width={size}\r\n              height={size}\r\n              onClick={() => onClick(x, y)}\r\n            />\r\n          ))\r\n        )}\r\n      </g>\r\n      <rect\r\n        x=\"0\"\r\n        y=\"0\"\r\n        width={sx}\r\n        height={sy}\r\n        stroke=\"black\"\r\n        strokeWidth=\"2\"\r\n        fill=\"transparent\"\r\n        pointerEvents=\"none\"\r\n      />\r\n      {plan.units.map((u) => (\r\n        <MapUnit onClick={onClick} plan={plan} unit={u} />\r\n      ))}\r\n    </svg>\r\n  );\r\n}\r\n\r\nfunction TextInput({\r\n  label,\r\n  value,\r\n  onChange,\r\n}: {\r\n  label: string;\r\n  value: string;\r\n  onChange: (value: string) => void;\r\n}) {\r\n  return (\r\n    <tr>\r\n      <th>{label}</th>\r\n      <td>\r\n        <input value={value} onChange={(e) => onChange(e.target.value)} />\r\n      </td>\r\n    </tr>\r\n  );\r\n}\r\n\r\nfunction NumberInput({\r\n  label,\r\n  value,\r\n  onChange,\r\n}: {\r\n  label: string;\r\n  value: number;\r\n  onChange: (value: number) => void;\r\n}) {\r\n  return (\r\n    <tr>\r\n      <th>{label}</th>\r\n      <td>\r\n        <input\r\n          type=\"number\"\r\n          value={value}\r\n          onChange={(e) => onChange(e.target.valueAsNumber)}\r\n        />\r\n      </td>\r\n    </tr>\r\n  );\r\n}\r\n\r\nfunction EnumInput<T extends string>({\r\n  empty,\r\n  label,\r\n  value,\r\n  options,\r\n  onChange,\r\n}: {\r\n  empty?: string;\r\n  label: string;\r\n  value: T | undefined;\r\n  options: T[];\r\n  onChange: (value: T | undefined) => void;\r\n}) {\r\n  function resolve(val: string) {\r\n    if (val !== empty) return val as T;\r\n    return undefined;\r\n  }\r\n\r\n  return (\r\n    <tr>\r\n      <th>{label}</th>\r\n      <td>\r\n        <select\r\n          value={value}\r\n          onChange={(e) => onChange(resolve(e.target.value))}\r\n        >\r\n          {empty && <option>{empty}</option>}\r\n          {options.map((o) => (\r\n            <option key={o} value={o}>\r\n              {o}\r\n            </option>\r\n          ))}\r\n        </select>\r\n      </td>\r\n    </tr>\r\n  );\r\n}\r\n\r\nfunction MapSettings({\r\n  plan,\r\n  setPlan,\r\n}: {\r\n  plan: BattlePlan;\r\n  setPlan: BattlePlanUpdater;\r\n}) {\r\n  return (\r\n    <table className=\"MapSettings\">\r\n      <tbody>\r\n        <TextInput\r\n          label=\"Name\"\r\n          value={plan.name}\r\n          onChange={(name) => setPlan({ ...plan, name })}\r\n        />\r\n        <NumberInput\r\n          label=\"Width\"\r\n          value={plan.width}\r\n          onChange={(width) => setPlan({ ...plan, width: width || 1 })}\r\n        />\r\n        <NumberInput\r\n          label=\"Height\"\r\n          value={plan.height}\r\n          onChange={(height) => setPlan({ ...plan, height: height || 1 })}\r\n        />\r\n        <TextInput\r\n          label=\"BG\"\r\n          value={plan.bg || \"\"}\r\n          onChange={(bg) => setPlan({ ...plan, bg })}\r\n        />\r\n      </tbody>\r\n    </table>\r\n  );\r\n}\r\n\r\nfunction UnitSettings({\r\n  plan,\r\n  setPlan,\r\n  unit,\r\n}: {\r\n  plan: BattlePlan;\r\n  setPlan: BattlePlanUpdater;\r\n  unit: Unit;\r\n}) {\r\n  const index = plan.units.indexOf(unit);\r\n\r\n  function update(patch: Partial<Unit>) {\r\n    return setPlan({\r\n      ...plan,\r\n      units: plan.units.map((u, i) => (index === i ? { ...u, ...patch } : u)),\r\n    });\r\n  }\r\n\r\n  function del() {\r\n    return setPlan({\r\n      ...plan,\r\n      units: plan.units.filter((_, i) => i !== index),\r\n    });\r\n  }\r\n\r\n  return (\r\n    <div className=\"UnitSettings\">\r\n      <button onClick={del}>Delete</button>\r\n      <table>\r\n        <tbody>\r\n          <TextInput\r\n            label=\"Label\"\r\n            value={unit.label}\r\n            onChange={(label) => update({ label })}\r\n          />\r\n          <TextInput\r\n            label=\"Type\"\r\n            value={unit.type}\r\n            onChange={(type) => update({ type })}\r\n          />\r\n          <EnumInput\r\n            label=\"Colour\"\r\n            value={unit.colour}\r\n            empty=\"(default)\"\r\n            options={Colours}\r\n            onChange={(colour) => update({ colour })}\r\n          />\r\n          <EnumInput\r\n            label=\"Size\"\r\n            value={unit.size}\r\n            options={Sizes}\r\n            onChange={(size) => update({ size })}\r\n          />\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction MapDetails({\r\n  plan,\r\n  selection,\r\n  setPlan,\r\n}: {\r\n  plan: BattlePlan;\r\n  selection?: coord;\r\n  setPlan: BattlePlanUpdater;\r\n}) {\r\n  const unit = selection && unitAt(plan, ...selection);\r\n\r\n  return (\r\n    <div className=\"MapDetails\">\r\n      <button onClick={() => window.open(getOTFBMUrl(plan))}>Test</button>\r\n      <MapSettings plan={plan} setPlan={setPlan} />\r\n      {unit && <UnitSettings plan={plan} setPlan={setPlan} unit={unit} />}\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction MapCode({\r\n  onChange,\r\n  plan,\r\n  uvar,\r\n}: {\r\n  onChange: (s: string) => void;\r\n  plan: BattlePlan;\r\n  uvar: boolean;\r\n}) {\r\n  const lines = uvar ? convertToUvar(plan) : convertToBPlan(plan).join(\"\\n\");\r\n\r\n  return (\r\n    <textarea\r\n      className=\"MapCode\"\r\n      value={lines}\r\n      onChange={(e) => onChange(e.target.value)}\r\n    />\r\n  );\r\n}\r\n\r\nexport default function MapPlanner() {\r\n  const [plan, setPlan] = useState<BattlePlan>({\r\n    name: \"name\",\r\n    width: 5,\r\n    height: 5,\r\n    units: [],\r\n    walls: [],\r\n  });\r\n\r\n  const [selection, setSelection] = useState<coord>();\r\n  function select(x: number, y: number) {\r\n    const current = selection && unitAt(plan, ...selection);\r\n\r\n    const unit = unitAt(plan, x, y);\r\n    if (!unit)\r\n      setPlan({\r\n        ...plan,\r\n        units: [\r\n          ...plan.units,\r\n          {\r\n            x,\r\n            y,\r\n            size: current?.size || \"M\",\r\n            label: current?.label || \"\",\r\n            type: current?.type || \"\",\r\n            colour: current?.colour,\r\n          },\r\n        ],\r\n      });\r\n\r\n    setSelection([x, y]);\r\n  }\r\n\r\n  function parse(s: string) {\r\n    const stripped = s.startsWith(\"!uvar Battles \") ? s.substr(14) : s;\r\n    setPlan(convertFromUVar(stripped));\r\n  }\r\n\r\n  return (\r\n    <div className=\"MapPlanner\">\r\n      <MapView onClick={select} plan={plan} />\r\n      <MapDetails plan={plan} setPlan={setPlan} selection={selection} />\r\n      <MapCode onChange={parse} plan={plan} uvar={true} />\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport MapPlanner from \"./MapPlanner\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <MapPlanner />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}